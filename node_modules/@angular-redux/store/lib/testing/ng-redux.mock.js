"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var store_1 = require("@angular-redux/store");
var ReplaySubject_1 = require("rxjs/ReplaySubject");
require("rxjs/add/observable/from");
require("rxjs/add/operator/distinctUntilChanged");
/**
 * Convenience mock to make it easier to control selector
 * behaviour in unit tests.
 */
var MockNgRedux = (function (_super) {
    __extends(MockNgRedux, _super);
    /** @hidden */
    function MockNgRedux() {
        var _this = _super.call(this, null) || this;
        _this.dispatch = function () { return null; };
        store_1.NgRedux.instance = _this; // This hooks the mock up to @select.
        MockNgRedux.mockInstance = _this;
        return _this;
    }
    /**
     * Returns a subject that's connected to any observable returned by the
     * given selector. You can use this subject to pump values into your
     * components or services under test; when they call .select or @select
     * in the context of a unit test, MockNgRedux will give them the values
     * you pushed onto your stub.
     */
    MockNgRedux.getSelectorStub = function (selector, comparator) {
        return MockNgRedux.initSelectorStub(selector, comparator).subject;
    };
    /**
     * Reset all previously configured stubs.
     */
    MockNgRedux.reset = function () {
        MockNgRedux.selections = {};
    };
    MockNgRedux.initSelectorStub = function (selector, comparator) {
        var key = selector.toString();
        var record = MockNgRedux.selections[key] || {
            subject: new ReplaySubject_1.ReplaySubject(),
            comparator: comparator,
        };
        MockNgRedux.selections[key] = record;
        return record;
    };
    MockNgRedux.prototype.select = function (selector, comparator) {
        var stub = MockNgRedux.initSelectorStub(selector, comparator);
        return stub.comparator ?
            stub.subject.distinctUntilChanged(stub.comparator) :
            stub.subject;
    };
    return MockNgRedux;
}(store_1.NgRedux));
MockNgRedux.mockInstance = null;
MockNgRedux.selections = {};
exports.MockNgRedux = MockNgRedux;
//# sourceMappingURL=ng-redux.mock.js.map