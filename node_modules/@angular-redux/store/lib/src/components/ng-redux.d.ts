import { Store, Reducer, Middleware, StoreEnhancer, Unsubscribe, Dispatch } from 'redux';
import { NgZone } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/filter';
import 'rxjs/add/operator/distinctUntilChanged';
import 'rxjs/add/operator/switchMap';
export declare type PropertySelector = string | number | symbol;
export declare type PathSelector = (string | number)[];
export declare type FunctionSelector<RootState, S> = ((s: RootState) => S);
export declare type Selector<RootState, S> = PropertySelector | PathSelector | FunctionSelector<RootState, S>;
export declare type Comparator = (x: any, y: any) => boolean;
export declare class NgRedux<RootState> {
    private ngZone;
    /** @hidden */
    static instance: NgRedux<any>;
    private _store;
    private _store$;
    /** @hidden */
    constructor(ngZone: NgZone);
    /**
     * configures a Redux store and allows NgRedux to observe and dispatch
     * to it.
     *
     * This should only be called once for the lifetime of your app, for
     * example in the constructor of your root component.
     *
     * @param reducer Your app's root reducer
     * @param initState Your app's initial state
     * @param middleware Optional Redux middlewares
     * @param enhancers Optional Redux store enhancers
     */
    configureStore(reducer: Reducer<RootState>, initState: RootState, middleware?: Middleware[], enhancers?: StoreEnhancer<RootState>[]): void;
    /**
     * Accepts a Redux store, then sets it in NgRedux and
     * allows NgRedux to observe and dispatch to it.
     *
     * This should only be called once for the lifetime of your app, for
     * example in the constructor of your root component. If configureStore
     * has been used this cannot be used.
     *
     * @param store Your app's store
     */
    provideStore(store: Store<RootState>): void;
    /**
     * Select a slice of state to expose as an observable.
     *
     * @typeparam S
     * @param selector key or function to select a part of the state
     * @param [comparer] Optional
     * comparison function called to test if an item is distinct
     * from the previous item in the source.
     *
     * @returns An Observable that emits items from the
     * source Observable with distinct values.
     */
    select<S>(selector?: Selector<RootState, S>, comparator?: Comparator): Observable<S>;
    /**
     * Get the current state of the application
     * @returns The application state
     */
    getState: () => RootState;
    /**
     * Subscribe to the Redux store changes
     *
     * @param listener A callback to invoke when the state is updated
     * @returns A function to unsubscribe
     */
    subscribe: (listener: () => void) => Unsubscribe;
    /**
     * Replaces the reducer currently used by the store to calculate the state.
     *
     * You might need this if your app implements code splitting and you want to
     * load some of the reducers dynamically. You might also need this if you
     * implement a hot reloading mechanism for Redux.
     *
     * @param nextReducer The reducer for the store to use instead.
     */
    replaceReducer: (nextReducer: Reducer<RootState>) => void;
    /**
     * Dispatch an action to Redux
     */
    dispatch: Dispatch<RootState>;
    private setStore(store);
    private storeToObservable;
}
